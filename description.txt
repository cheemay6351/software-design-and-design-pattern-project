I used factory method and singleton (creational software design patterns) for my assignments because the simple idea I thought of was I give the specifications of the shape to the factory. The specifications of the shape being my inputs and then the factory will help me create the shape from my specifications. The shape created will be the product/output of the factory. So, factory will be specifically for generating my shapes. I learnt most of this information from the tutorials as well as from ‘dofactory.com’. Factory method also uses inheritance, so it allows me to create a new class from an existing class which is very handy. In this case, my shape class is the parent class with the actual shape's classes being the subclasses/child classes e.g., ‘Circle’ class. Inheritance is a key feature of Object-Oriented Programming (OOP), so I wanted to continue learning about it and utilising my knowledge on it for my assignments. The implementation of singleton is for styling my shapes because I won’t have to write the same piece of code for each of my shapes which will up a lot of time and ultimately inefficient in general.

I created a factory class called 'ShapeFactory' which has a method for generating my shapes. It takes in a string as user input and going through a switch, it checks if the user input is one of the shapes that could be created like ‘circle’, ‘rectangle’ etc. and if it is one of the shapes that could be created then it will return the shape. I created this factory class for each of the assignments (assignment 2, 3 and 4) since it works all the same for the assignments. For assignment 2, in my ‘Program.cs’, I call my factory method and let my shape called ‘currentShape’ be equals to a shape with the use of the method, the string type being one of the shapes. I done this for all the other shapes as well. I did the same thing for my assignment 3 because it works the same way. So, the shapes generated will be sent back to the ‘Program.cs’ to the main canvas. ‘addShape()’ will prompt user to add a shapes until they are done. From user input’s specifications for the shape, which is my string, the factory will generate a shape for me. The shapes will be added to canvas. For assignment 4, it was almost the same thing, but I just had to call the method in my main class to my command ‘Do’ action. The functions of my add shape command class; it adds a shape to the canvas as Do() action.

For styling my shapes, I created a class called ‘StylesFactory’ where there are methods that ask the user if they wish to leave it with its default styles or style the shapes to their liking. If its latter, then it asks for user input for each of the styles for the shapes and set it for the shape. The code for these were extracted from my ‘Program.cs’ and put into my ‘StylesFactory’ class for use. It makes the code a lot more easier to understand. For assignment 3 and 4, I made sure that the shape the user input wants to set styles for is correct before going about styling it; ‘styles.chooseStyles(rectangle, “rectangle”);’. There are some that are different in my assignment 2, I just have to ensure the ‘currentShape’ isn’t empty since the styles for the shape svg will be blank. The implementation of factory method and singleton has definitely shortened my assignment’s code and it looks a bit cleaner and simpler. In terms of efficiency, it works just the same without the use of the factory method and singleton but the use of it is appropriate for the assignments. 
